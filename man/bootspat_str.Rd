% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bootspat_str.R
\name{bootspat_str}
\alias{bootspat_str}
\title{Spatially structured sample}
\usage{
bootspat_str(
  x,
  prob = NULL,
  rich = NULL,
  fr = NULL,
  cores = 1,
  filename = "",
  memory = NULL,
  ...
)
}
\arguments{
\item{x}{SpatRaster. A presence-absence SpatRaster.}

\item{prob}{SpatRaster. Stack of probability values. Structures the spatial
pattern of each randomized species.}

\item{rich}{SpatRaster. Richness pattern structuring the sample size of
each cell randomization. Calculated if not provided.}

\item{fr}{frequency of pixels that a species is observed within each layer of x}

\item{cores}{positive integer. If \code{cores > 1}, a 'parallel' package cluster with that many cores is created and used. You can also supply a cluster object. Ignored for functions that are implemented by terra in C++ (see under fun)}

\item{filename}{character. Output filename}

\item{memory}{logical. Checks if there is enough available RAM memory. Calculated if NULL}

\item{...}{additional parameters for terra::app}
}
\value{
SpatRaster object
}
\description{
Randomizes a raster stack with fixed richness.
Randomizations are based on frequencies (given or calculated from x)
and, optionally, a probability raster stack.
Both, frequencies and probability raster stack, control the probability of a
given species is sampled in each cell raster. Frequency control the probability
of each species compared to all others. Probability raster stack control the
probability that each species is sampled in a given raster cell.
}
\examples{
\dontrun{
library(SESraster)
library(terra)
# creating random species distributions
f <- system.file("ex/elev.tif", package="terra")
r <- rast(f)
set.seed(510)
r10 <- rast(lapply(1:18,
                function(i, r, mn, mx){
                  app(r, function(x, t){
                    sapply(x, function(x, t){
                       x<max(t) & x>min(t)
                    }, t=t)
                  }, t=sample(seq(mn, mx), 2))
                }, r=r, mn=minmax(r)[1]+10, mx=minmax(r)[2]-10))

names(r10) <- paste("sp", 1:nlyr(r10))
plot(r10)

# bootstrapping once
randr10 <- bootspat_str(r10, rprobnull)
plot(randr10)
plot(r10)
plot(c(sum(r10), sum(randr10)))
cbind(rand=sapply(randr10, function(x)freq(x)[2,3]),
      actual=sapply(r10, function(x)freq(x)[2,3]))
}
}
\author{
Neander Marcel Heming
}
