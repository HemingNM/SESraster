[{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://hemingnm.github.io/SESraster/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://hemingnm.github.io/SESraster/articles/SES.html","id":"contents","dir":"Articles","previous_headings":"","what":"Contents","title":"Standardized effect sizes","text":"Standardized effect sizes Random species generation SES spatial randomization SES species trait randomization Conclusion References","code":""},{"path":"https://hemingnm.github.io/SESraster/articles/SES.html","id":"ses","dir":"Articles","previous_headings":"","what":"Standardized effect size","title":"Standardized effect sizes","text":"Standardized effect size (SES) measure magnitude studied effect. indicates direction degree effect departures null model. SESraster uses Cohen’s d (Cohen 1988), measured difference observed pattern average n randomized observations divided standard deviation randomized observations \\(SES = (Obs-mean(Null))/sd(Null)\\).","code":""},{"path":[]},{"path":"https://hemingnm.github.io/SESraster/articles/SES.html","id":"randsp","dir":"Articles","previous_headings":"Calculating SES","what":"Random species generation","title":"Standardized effect sizes","text":"Now, let’s see package features. First, create random species distributions using package terra.   distributions hand, can perform spatial randomizations.","code":"library(SESraster) #> This is SESraster 0.7.0 #> To support our work, cite SESraster in your publications. See: #>   citation(\"SESraster\") library(terra) #> terra 1.7.39 # creating random species distributions f <- system.file(\"ex/elev.tif\", package=\"terra\") r <- rast(f) set.seed(510) r <- rast(lapply(1:18,                 function(i, r, mn, mx){                   app(r, function(x, t){                     sapply(x, function(x, t){                        x<max(t) & x>min(t)                     }, t = t)                   }, t = sample(seq(mn, mx), 2))                 }, r = r, mn = minmax(r)[1]+10, mx = minmax(r)[2]-10))  names(r) <- paste(\"sp\", 1:nlyr(r)) plot(r)"},{"path":"https://hemingnm.github.io/SESraster/articles/SES.html","id":"ses-spat","dir":"Articles","previous_headings":"Calculating SES","what":"SES with spatial randomization","title":"Standardized effect sizes","text":"First need function computes desired metric. function must work spatial data. Just exemplify, creating function compute mean presences absences (1/0) within cell. probably wants use ecologically meaningful function, just example use.  Now, compute SES, compute desired metric sending function appmean() SESraster() FUN argument. also randomize original data species using bootspat_naive() algorithm passing argument random=\"species\" spat_alg_args.   Compute metric SES using bootspat_naive() randomize site changing argument random=\"site\" spat_alg_args.","code":"appmean <- function(x, ...){                       terra::app(x, \"mean\", ...) } ses.sp <- SESraster(r, FUN = appmean,                      spat_alg = \"bootspat_naive\", spat_alg_args = list(random = \"species\"),                     aleats = 5) plot(ses.sp) ses.st <- SESraster(r, FUN = appmean,                     spat_alg = \"bootspat_naive\", spat_alg_args = list(random = \"site\"),                     aleats = 5) plot(ses.st)"},{"path":"https://hemingnm.github.io/SESraster/articles/SES.html","id":"ses-fun-arg","dir":"Articles","previous_headings":"Calculating SES > SES with spatial randomization","what":"Passing arguments to FUN","title":"Standardized effect sizes","text":"also possible send arguments function calculates desired metric (FUN). can done sending list arguments FUN_args.   Notice NAs can ignored appmean() function using FUN_args = list(na.rm = TRUE):","code":"## let's create some missing values for layer/species 1 r2 <- r set.seed(10) cellsNA <- terra::spatSample(r2, 30, na.rm = TRUE, cells = TRUE, values = FALSE) r2[cellsNA][1] <- NA # plot(r) set.seed(10) sesNA <- SESraster(r2, FUN = appmean, FUN_args = list(na.rm = FALSE),                    spat_alg = \"bootspat_naive\", spat_alg_args=list(random = \"species\"),                    aleats = 5) head(sesNA[cellsNA]) #>   Observed.mean Null_Mean.mean Null_SD.mean SES.mean #> 1            NA             NA           NA       NA #> 2            NA             NA           NA       NA #> 3            NA             NA           NA       NA #> 4            NA             NA           NA       NA #> 5            NA             NA           NA       NA #> 6            NA             NA           NA       NA plot(sesNA) set.seed(10) ses.woNA <- SESraster(r2, FUN = appmean, FUN_args = list(na.rm = TRUE),                        spat_alg = \"bootspat_naive\", spat_alg_args=list(random = \"species\"),                       aleats = 5) head(ses.woNA[cellsNA]) #>   Observed.mean Null_Mean.mean Null_SD.mean   SES.mean #> 1    0.11764706      0.3882353   0.08921030 -3.0331502 #> 2    0.41176471      0.3882353   0.08921030  0.2637522 #> 3    0.41176471      0.4117647   0.09300817  0.0000000 #> 4    0.05882353      0.3647059   0.07669650 -3.9882179 #> 5    0.35294118      0.4000000   0.07669650 -0.6135720 #> 6    0.52941176      0.4941176   0.08921030  0.3956283 plot(ses.woNA)"},{"path":"https://hemingnm.github.io/SESraster/articles/SES.html","id":"ses-trait","dir":"Articles","previous_headings":"Calculating SES","what":"SES from species trait randomization","title":"Standardized effect sizes","text":"addition spatial randomizations, possible create null model randomizing parameter (.e. argument) metric passed FUN. useful, example, randomize species trait (e.g. branch length) used compute metric. example function appsv() uses argument lyrv compute fictional metric. also create fictional values trait.  exapmle, spatial randomization performed, trait randomization. select trait randomized, pick desired argument FUN_args using Fa_sample name desired argument (“lyrv”). select function, “sample” used. also possible send arguments function Fa_alg Fa_alg_args. works way arguments sent FUN spat_alg FUN_args spat_alg_args.  first example performed trait sampling without replacement.   second example performed trait sampling replacement passing replace = TRUE Fa_alg_args.","code":"## example with `Fa_alg` appsv <- function(x, lyrv, na.rm = FALSE, ...){                       sumw <- function(x, lyrv, na.rm, ...){                         ifelse(all(is.na(x)), NA,                                sum(x*lyrv, na.rm=na.rm, ...))                       }                       stats::setNames(terra::app(x, sumw, lyrv = lyrv, na.rm=na.rm, ...), \"sumw\") }  set.seed(10) trait  <- sample(100:2000, nlyr(r)) trait #>  [1]  590 1772 1453  467 1583  538 1707 1561 1546 1634 1846  443 1394  242 1037 #> [16] 1578 1998 1029 set.seed(10) ses <- SESraster(r, FUN = appsv,                  FUN_args = list(lyrv = trait, na.rm = TRUE),                     Fa_sample = \"lyrv\",                     Fa_alg = \"sample\", Fa_alg_args = list(replace = FALSE),                     aleats = 5) plot(ses) set.seed(10) ses <- SESraster(r, FUN = appsv,                  FUN_args = list(lyrv = trait, na.rm = TRUE),                     Fa_sample = \"lyrv\",                     Fa_alg = \"sample\", Fa_alg_args = list(replace = TRUE),                     aleats = 5) plot(ses)"},{"path":"https://hemingnm.github.io/SESraster/articles/SES.html","id":"concl","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Standardized effect sizes","text":"SESraster R package aims simplify randomization raster data calculation standardized effect sizes spatial data. hope useful analize vast amount raster data generated analysis biogeographycal macroecological patterns.","code":""},{"path":[]},{"path":"https://hemingnm.github.io/SESraster/articles/null-models.html","id":"contents","dir":"Articles","previous_headings":"","what":"Contents","title":"Null model algorithms","text":"Introduction Algorithms References","code":""},{"path":"https://hemingnm.github.io/SESraster/articles/null-models.html","id":"intro","dir":"Articles","previous_headings":"","what":"Introduction","title":"Null model algorithms","text":"Null models widely used analyze patterns observed nature attempt understand ecological evolutionary mechanisms structuring biological communities. null model simplified representation species distributed biological communities assembled specific ecological processes operating. now, algorithms designed create null models using matrix data. package SESraster covers current gap implementing randomization algorithms build null models using presence/absence raster data.","code":""},{"path":"https://hemingnm.github.io/SESraster/articles/null-models.html","id":"algorithms","dir":"Articles","previous_headings":"","what":"Algorithms","title":"Null model algorithms","text":"Gotelli (2000) summarizes nine null model algorithms species co-occurrence analysis based sums species (originally rows) sites (originally columns) treated (.e. fixed, equiprobable, proportional sums; see Table @ref(tab:table1)) (Gotelli 2000). data null model analyses usually consists binary presence-absence matrix, rows represent species taxa, columns represent sites samples, entries represent presence (1) absence (0) particular species particular site (Ulrich Gotelli 2012). Nine null model algorithms species co-occurrence analysis listed Gotelli (2000). Algorithms marked green already implemented SESraster","code":"#> Loading required package: kableExtra"},{"path":[]},{"path":"https://hemingnm.github.io/SESraster/articles/spatial-null-models.html","id":"contents","dir":"Articles","previous_headings":"","what":"Contents","title":"Spatial null model algorithms in SESraster","text":"Introduction Installation Random species generation Equiprobable-Equiprobable Fixed-Equiprobable Equiprobable-Fixed Fixed-Proportional Fixed-Fixed References","code":""},{"path":"https://hemingnm.github.io/SESraster/articles/spatial-null-models.html","id":"intro","dir":"Articles","previous_headings":"","what":"Introduction","title":"Spatial null model algorithms in SESraster","text":"overview null model types summarized Gotelli (2000), let’s see randomization algorithms implemented SESraster behave spatial data.","code":""},{"path":"https://hemingnm.github.io/SESraster/articles/spatial-null-models.html","id":"install","dir":"Articles","previous_headings":"","what":"Installation","title":"Spatial null model algorithms in SESraster","text":"development version SESraster can installed SESraster repository Github:","code":"install.packages(\"SESraster\") library(SESraster) require(devtools) devtools::install_github(\"HemingNM/SESraster\", build_vignettes = TRUE) library(SESraster)"},{"path":"https://hemingnm.github.io/SESraster/articles/spatial-null-models.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"Spatial null model algorithms in SESraster","text":"SESraster package implements functions randomize presence/absence species distribution raster data without including spatial structure calculating Standardized Effect Sizes (SES) necessary null hypothesis testing. function bootspat_naive() retain spatial structure community richness species distribution size time. randomizes raster stack according observed frequency presences species (layer) using following methods: sites (raster cells), species (raster layers) (layers cells). , randomization without retaining spatial structure data, commonly used method randomization community data. function bootspat_str() retain spatial structure community richness species distribution size time. randomizes raster stack keeping species richness fixed across raster cells. knowledge method previously implemented R. Let’s see examples.","code":""},{"path":"https://hemingnm.github.io/SESraster/articles/spatial-null-models.html","id":"randsp","dir":"Articles","previous_headings":"Analysis","what":"Random species generation","title":"Spatial null model algorithms in SESraster","text":"Now, let’s see package features. First, create random species distributions using package terra.  distributions hand, can perform spatial randomizations.","code":"library(SESraster) #> This is SESraster 0.7.0 #> To support our work, cite SESraster in your publications. See: #>   citation(\"SESraster\") library(terra) #> terra 1.7.39 # creating random species distributions f <- system.file(\"ex/elev.tif\", package=\"terra\") r <- rast(f) set.seed(510) r <- rast(lapply(1:18,                 function(i, r, mn, mx){                   app(r, function(x, t){                     sapply(x, function(x, t){                        x<max(t) & x>min(t)                     }, t=t)                   }, t=sample(seq(mn, mx), 2))                 }, r=r, mn=minmax(r)[1]+10, mx=minmax(r)[2]-10))  names(r) <- paste(\"sp\", 1:nlyr(r)) plot(r)"},{"path":"https://hemingnm.github.io/SESraster/articles/spatial-null-models.html","id":"spat-unstr","dir":"Articles","previous_headings":"Analysis","what":"Spatially Unstructured Randomization","title":"Spatial null model algorithms in SESraster","text":"First, let’s randomize species distribution ignoring spatial structure function bootspat_naive.","code":""},{"path":"https://hemingnm.github.io/SESraster/articles/spatial-null-models.html","id":"ee","dir":"Articles","previous_headings":"Analysis > Spatially Unstructured Randomization","what":"both, by site and species simultaneously: Equiprobable-Equiprobable","title":"Spatial null model algorithms in SESraster","text":"can randomize presences/absences (1s/0s) using method . method combines randomization site species time. shuffle presences across cells layers, changing site richness species distribution sizes location time. equivalent SIM1 (equiprobable-equiprobable) method Gotelli (2000). Notice NA cells ignored.","code":"srb <- bootspat_naive(r, random = \"both\") plot(srb, legend=F) plot(c(sum(r), sum(srb)), main=c(\"observed\", \"randomized\"))"},{"path":"https://hemingnm.github.io/SESraster/articles/spatial-null-models.html","id":"fe","dir":"Articles","previous_headings":"Analysis > Spatially Unstructured Randomization","what":"by species: Fixed-Equiprobable","title":"Spatial null model algorithms in SESraster","text":"can randomize species. second method performed layer (species) stack randomizing position species presences space. data fits computer RAM memory randomization equivalent SIM2 (fixed-equiprobable) method Gotelli (2000) flatland model Laffan & Crisp (2003). changes species richness cell retaining size species distribution (except randomization performed frequency). running frequency, presences/absences (1s/0s) sampled pixel based probability (frequency) species found within study area. equivalent SIM7 (proportional-equiprobable) method Gotelli (2000). species, randomized frequency presences similar actual frequency exactly .   Check number occupied pixels randomized distributions similar observed distributions.","code":"sr1 <- bootspat_naive(r, random = \"species\") plot(sr1, legend=F) plot(c(sum(r), sum(sr1)), main=c(\"observed\", \"randomized\")) sr1b <- bootspat_naive(r, random = \"species\", memory = FALSE) #> The file does not fit on the memory. Randomization will be done by probability. cbind(observed=sapply(r, function(x)freq(x)[2,3]),       randomized=sapply(sr1, function(x)freq(x)[2,3]),       randomized_freq=sapply(sr1b, function(x)freq(x)[2,3])) #>       observed randomized randomized_freq #>  [1,]      767        767             773 #>  [2,]     3443       3443            3452 #>  [3,]     1175       1175            1180 #>  [4,]      889        889             872 #>  [5,]      908        908             952 #>  [6,]     2160       2160            2143 #>  [7,]      548        548             544 #>  [8,]      133        133             127 #>  [9,]      122        122             118 #> [10,]     4174       4174            4171 #> [11,]     2565       2565            2502 #> [12,]     3031       3031            3029 #> [13,]       36         36              35 #> [14,]     4387       4387            4398 #> [15,]     3270       3270            3235 #> [16,]     2198       2198            2216 #> [17,]     2427       2427            2392 #> [18,]      235        235             229"},{"path":"https://hemingnm.github.io/SESraster/articles/spatial-null-models.html","id":"ef","dir":"Articles","previous_headings":"Analysis > Spatially Unstructured Randomization","what":"by site: Equiprobable-Fixed","title":"Spatial null model algorithms in SESraster","text":"Now, randomize site. method randomizes position (presence/absence) species within site (cell) stack. method keeps species richness constant cell size species distribution might change, less pixels can randomly assigned species (raster layer). randomization equivalent SIM3 (equiprobable-fixed) method Gotelli (2000). Notice , although spatial structure species richness held constant, number pixels species occupy completely randomized.","code":"sr2 <- bootspat_naive(r, random = \"site\") plot(sr2, legend=F) plot(c(sum(r), sum(sr2)), main=c(\"observed\", \"randomized\"))"},{"path":"https://hemingnm.github.io/SESraster/articles/spatial-null-models.html","id":"spat-str","dir":"Articles","previous_headings":"Analysis","what":"Spatially Structured Randomization","title":"Spatial null model algorithms in SESraster","text":"Notice randomization site bootspat_naive() keeps species richness fixed (.e. equal input raster), size species’ distribution (.e. number pixels species) completely randomized. hand, randomization species keeps number pixels species fixed, richness completely randomized. functions bootspat_str() bootspat_ff() add constraints randomization. See :","code":""},{"path":"https://hemingnm.github.io/SESraster/articles/spatial-null-models.html","id":"fp","dir":"Articles","previous_headings":"Analysis > Spatially Structured Randomization","what":"function bootspat_str(): Fixed-Proportional","title":"Spatial null model algorithms in SESraster","text":"function bootspat_str() implement spatially structured randomization keeps species richness pattern fixed distribution size species, proportional. method based second null model Laffan & Crisp (2003), uses probability sampling presences based frequency presences species. Therefore, equivalent SIM5 (proportional-fixed) method Gotelli (2000). Notice lack spatial structure way randomization site, however size species distribution (nearly) retained. Randomizations based frequencies (given calculated output raster (presence-absence SpatRaster) , optionally, probability raster stack. , frequency vector probability raster stack, control probability given species sampled raster cell. frequency vector controls probability sampling species compared others. probability raster stack controls probability species sampled given raster cell. species distribution spatially randomized according frequency presence species. method randomizes position species presences space keeping species richness constant number occupied pixels randomized distributions similar actual distributions.  See unchanged spatial pattern species richness.  Check number occupied pixels randomized distributions similar observed distributions.","code":"# bootstrapping once fr.prob <- SESraster::fr2prob(r) prob <- terra::app(r,                    function(x){                      ifelse(is.na(x), 0, 1)                    })  randr10 <- bootspat_str(r, rprob = prob, fr_prob = fr.prob) plot(randr10, legend=F) plot(c(sum(r), sum(randr10)), main=c(\"observed\", \"randomized\")) cbind(observed=sapply(r, function(x)freq(x)[2,3]),       randomized=sapply(randr10, function(x)freq(x)[2,3])) #>       observed randomized #>  [1,]      767        681 #>  [2,]     3443       3532 #>  [3,]     1175       1119 #>  [4,]      889        849 #>  [5,]      908        832 #>  [6,]     2160       2138 #>  [7,]      548        461 #>  [8,]      133        104 #>  [9,]      122         95 #> [10,]     4174       4246 #> [11,]     2565       2602 #> [12,]     3031       3127 #> [13,]       36         32 #> [14,]     4387       4413 #> [15,]     3270       3379 #> [16,]     2198       2193 #> [17,]     2427       2483 #> [18,]      235        182"},{"path":"https://hemingnm.github.io/SESraster/articles/spatial-null-models.html","id":"ff","dir":"Articles","previous_headings":"Analysis > Spatially Structured Randomization","what":"function bootspat_ff(): Fixed-Fixed","title":"Spatial null model algorithms in SESraster","text":"function bootspat_ff() implement spatially structured randomization keeps , species richness pattern species distribution size, fixed. method equivalent SIM9 (fixed-fixed) method Gotelli (2000) based null model Connor & Simberloff (1979), differences. original algorithm randomly chooses sequence species fills sites (originally islands) reach observed species richness. However, sites (cells) filled species, species enough available sites placed, sampled frequency smaller observed. Additionally, sites completely filled duplicated species allowed site. solution increase number sites place species. , opted order sequence species largest Nj smallest. algorithm usually able match constraints (site richness distribution size) cases, specially small datasets, sites lack species match original richness species assigned less sites originally observed. See species distribution sizes maintained. Compare original null distributions. Plots sorted largest smallest distributions.    See unchanged spatial pattern species richness.  Check number occupied pixels randomized distributions similar observed distributions.","code":"# bootstrapping once randff <- bootspat_ff(r) obs_fr <- unlist(terra::global(r, function(x) sum(x, na.rm = TRUE))) v_seq <- order(obs_fr) plot(c(r[[v_seq[length(v_seq)-1:4]]], randff[[v_seq[length(v_seq)-1:4]]]),       nr=2, main=paste(rep(c(\"original\", \"null\"), each=4), names(r[[v_seq[length(v_seq)-1:4]]]))) plot(c(r[[v_seq[floor(length(v_seq)/2) + 2:-1]]], randff[[v_seq[floor(length(v_seq)/2)+ 2:-1]]]),      nr=2, main=paste(rep(c(\"original\", \"null\"), each=4), names(r[[v_seq[floor(length(v_seq)/2)+ 2:-1]]]))) plot(c(r[[v_seq[4:1]]], randff[[v_seq[4:1]]]),       nr=2, main=paste(rep(c(\"original\", \"null\"), each=4), names(r[[v_seq[4:1]]]))) plot(c(sum(r), sum(randff), sum(r)-sum(randff)), main=c(\"observed\", \"randomized\", \"difference\"), nr=1) cbind(observed=sapply(r, function(x)freq(x)[2,3]),       randomized=sapply(randff, function(x)freq(x)[2,3])) #>       observed randomized #>  [1,]      767        767 #>  [2,]     3443       3443 #>  [3,]     1175       1175 #>  [4,]      889        889 #>  [5,]      908        908 #>  [6,]     2160       2160 #>  [7,]      548        548 #>  [8,]      133        133 #>  [9,]      122        122 #> [10,]     4174       4174 #> [11,]     2565       2565 #> [12,]     3031       3031 #> [13,]       36         36 #> [14,]     4387       4387 #> [15,]     3270       3270 #> [16,]     2198       2198 #> [17,]     2427       2427 #> [18,]      235        235"},{"path":[]},{"path":"https://hemingnm.github.io/SESraster/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Neander Marcel Heming. Author, maintainer, copyright holder. Flávio Mota. Author. Gabriela Alves-Ferreira. Author.","code":""},{"path":"https://hemingnm.github.io/SESraster/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Heming N, Mota F, Alves-Ferreira G (????). “SESraster: Raster Randomization Null Hypothesis Testing.” R package version 0.7.0, https://CRAN.R-project.org/package=SESraster.","code":"@Misc{,   title = {{SESraster}: Raster Randomization for Null Hypothesis Testing},   author = {Neander Marcel Heming and Flávio M. M. Mota and Gabriela Alves-Ferreira},   note = {R package version 0.7.0},   url = {https://CRAN.R-project.org/package=SESraster}, }"},{"path":"https://hemingnm.github.io/SESraster/index.html","id":"sesraster-","dir":"","previous_headings":"","what":"Raster Randomization for Null Hypothesis Testing","title":"Raster Randomization for Null Hypothesis Testing","text":"Randomization presence/absence species distribution raster data without including spatial structure calculating standardized effect sizes testing null hypothesis. randomization algorithms based classical algorithms matrices (Gotelli 2000, doi:10.2307/177478) implemented raster data.","code":""},{"path":"https://hemingnm.github.io/SESraster/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Raster Randomization for Null Hypothesis Testing","text":"install package, run: development version can installed Github repository:","code":"install.packages(\"SESraster\") require(devtools) install_github(\"HemingNM/SESraster\", build_vignettes = TRUE)"},{"path":"https://hemingnm.github.io/SESraster/index.html","id":"sesraster-basics","dir":"","previous_headings":"","what":"SESraster basics","title":"Raster Randomization for Null Hypothesis Testing","text":"Basic information package can found , package’s webpage, vignettes: overview null model algorithms species co-occurrence analysis summarized (Gotelli 2000, doi:10.2307/177478). installation instructions see null model algorithms implemented SESraster work spatial data, just get started). computing standardized effect sizes (SES) using SESraster() function null model algorithms implemented package, take look SES) computation.","code":"browseVignettes(\"SESraster\")"},{"path":"https://hemingnm.github.io/SESraster/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Raster Randomization for Null Hypothesis Testing","text":"package useful , please cite publications. Find information using:","code":"citation(\"SESraster\")"},{"path":"https://hemingnm.github.io/SESraster/index.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Raster Randomization for Null Hypothesis Testing","text":"question find bug, let us know topic “Issues”.","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/SESraster.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized effect sizes for SpatRaster objects — SESraster","title":"Standardized effect sizes for SpatRaster objects — SESraster","text":"Calculates standardized effect sizes using custom function null model algorithm.","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/SESraster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized effect sizes for SpatRaster objects — SESraster","text":"","code":"SESraster(   x,   FUN = NULL,   FUN_args = list(),   spat_alg = NULL,   spat_alg_args = list(),   Fa_sample = NULL,   Fa_alg = NULL,   Fa_alg_args = list(),   aleats = 10,   cores = 1,   filename = \"\",   overwrite = FALSE,   force_wr_aleat_file = FALSE,   ... )"},{"path":"https://hemingnm.github.io/SESraster/reference/SESraster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized effect sizes for SpatRaster objects — SESraster","text":"x SpatRaster. SpatRaster containing presence-absence data (0 1) set species. FUN function applied. must work SpatRaster objects. See examples. FUN_args Named list arguments passed FUN spat_alg function algorithm implementing desired randomization method. must work SpatRaster objects. See examples. Example functions work : bootspat_naive, bootspat_str, bootspat_ff. spat_alg_args List arguments passed randomization method chosen 'spat_alg'. See bootspat_naive, bootspat_str, bootspat_ff Fa_sample Named list length 1 FUN argument (e.g. vector) randomized Fa_alg function randomize non spatial argument passed 'FUN'. Fa_alg_args Named list arguments passed function 'Fa_alg' aleats positive integer. positive integer indicating many times calculation repeated. cores positive integer. cores > 1, 'parallel' package cluster many cores created used. can also supply cluster object. Ignored functions implemented terra C++ (see fun) filename character. Output filename overwrite logical. TRUE, filename overwritten force_wr_aleat_file logical. Force writing bootstrapped rasters, even files fit memory. Mostly used internal test units. ... additional arguments passed 'terra::app()' function.","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/SESraster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized effect sizes for SpatRaster objects — SESraster","text":"SpatRaster. function returns observed metric, mean simulations calculated n=aleats times, standard deviation simulations, standardized effect size (SES) metric defined FUN.","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/SESraster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized effect sizes for SpatRaster objects — SESraster","text":"Perform n=aleats spatial randomizations based randomization method defined 'spat_alg' argument calculates metric defined 'FUN' argument. function (FUN) calculate desired metric must work app, focal, focal3D family functions.","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/SESraster.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardized effect sizes for SpatRaster objects — SESraster","text":"Gotelli 2000","code":""},{"path":[]},{"path":"https://hemingnm.github.io/SESraster/reference/SESraster.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized effect sizes for SpatRaster objects — SESraster","text":"Neander M. Heming Gabriela Alves-Ferreira","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/SESraster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized effect sizes for SpatRaster objects — SESraster","text":"","code":"library(SESraster) library(terra) #> terra 1.7.39 r <- load_ext_data() appmean <- function(x, ...){                       terra::app(x, \"mean\", ...)                     } ses <- SESraster(r, FUN=appmean, spat_alg = \"bootspat_naive\", spat_alg_args=list(random=\"species\"),                  aleats = 4) plot(ses)  ses <- SESraster(r, FUN=appmean, spat_alg = \"bootspat_naive\", spat_alg_args=list(random=\"site\"),                  aleats = 4) plot(ses)   ## example of how to use 'FUN_args' r[7][1] <- NA plot(r)  set.seed(10) sesNA <- SESraster(r, FUN=appmean, FUN_args = list(na.rm = FALSE),                  spat_alg = \"bootspat_naive\", spat_alg_args=list(random = \"species\"),                  aleats = 4) plot(sesNA)   set.seed(10) ses <- SESraster(r, FUN=appmean, FUN_args = list(na.rm = TRUE),                 spat_alg = \"bootspat_naive\", spat_alg_args=list(random = \"species\"),                  aleats = 4) plot(ses)   ## example with 'Fa_alg' appsv <- function(x, lyrv, na.rm = FALSE, ...){                       sumw <- function(x, lyrv, na.rm, ...){                             ifelse(all(is.na(x)), NA,                                     sum(x*lyrv, na.rm=na.rm, ...))                       }                       stats::setNames(terra::app(x, sumw, lyrv = lyrv, na.rm=na.rm, ...), \"sumw\")                     } set.seed(10) ses <- SESraster(r, FUN=appsv,                  FUN_args = list(lyrv = seq_len(nlyr(r)), na.rm = TRUE),                     Fa_sample = \"lyrv\",                     Fa_alg = \"sample\", Fa_alg_args = list(replace=FALSE),                     aleats = 4) plot(ses)   set.seed(10) ses <- SESraster(r, FUN=appsv,                  FUN_args = list(lyrv = seq_len(nlyr(r)), na.rm = TRUE),                     Fa_sample = \"lyrv\",                     Fa_alg = \"sample\", Fa_alg_args = list(replace=TRUE),                     aleats = 4) plot(ses)"},{"path":"https://hemingnm.github.io/SESraster/reference/algorithm_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Performance of randomization algorithms — algorithm_metrics","title":"Performance of randomization algorithms — algorithm_metrics","text":"Compares richness occurrence incidence across species actual randomized species distributions","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/algorithm_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performance of randomization algorithms — algorithm_metrics","text":"","code":"algorithm_metrics(   x,   spat_alg = NULL,   spat_alg_args = NULL,   aleats = 10,   filename = \"\",   force_wr_aleat_file = FALSE,   ... )"},{"path":"https://hemingnm.github.io/SESraster/reference/algorithm_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performance of randomization algorithms — algorithm_metrics","text":"x SpatRaster. SpatRaster containing presence-absence data (0 1) set species. spat_alg function algorithm implementing desired randomization method. must work SpatRaster objects. See examples. Example functions work : bootspat_naive, bootspat_str, bootspat_ff. spat_alg_args List arguments passed randomization method chosen 'spat_alg'. See bootspat_naive, bootspat_str, bootspat_ff aleats positive integer. positive integer indicating many times calculation repeated. filename character. Output filename force_wr_aleat_file logical. Force writing bootstrapped rasters, even files fit memory. Mostly used internal test units. ... additional arguments passed 'terra::app()' function.","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/algorithm_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performance of randomization algorithms — algorithm_metrics","text":"list two components: spp_metrics: matrix metrics comparing actual randomized frequency species occurrence. Metrics average, sd, min, max frequency across randomizations, sp_reldiff (average difference relative species frequency), global_reldiff (average difference relative number available cells), upper lower confidence intervals sp_reldiff global_reldiff. spat_rich_diff: SpatRaster summary statistics differences actual bootstrapped site (cell) richness","code":""},{"path":[]},{"path":"https://hemingnm.github.io/SESraster/reference/algorithm_metrics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Performance of randomization algorithms — algorithm_metrics","text":"Neander M. Heming","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/algorithm_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performance of randomization algorithms — algorithm_metrics","text":"","code":"library(SESraster) library(terra) r <- load_ext_data() algorithm_metrics(r, spat_alg = \"bootspat_naive\", spat_alg_args=list(random=\"species\"), aleats = 4) #> $spp_metrics #>     actual rand_avg rand_sd rand_min rand_max sp_reldiff global_reldiff #> sp1      1        1       0        1        1          0              0 #> sp2     14       14       0       14       14          0              0 #> sp3      9        9       0        9        9          0              0 #> sp4     12       12       0       12       12          0              0 #> sp5     12       12       0       12       12          0              0 #> sp6     10       10       0       10       10          0              0 #> sp7     23       23       0       23       23          0              0 #>     sp_reldiff_l sp_reldiff_u global_reldiff_l global_reldiff_u #> sp1            0            0                0                0 #> sp2            0            0                0                0 #> sp3            0            0                0                0 #> sp4            0            0                0                0 #> sp5            0            0                0                0 #> sp6            0            0                0                0 #> sp7            0            0                0                0 #>  #> $spat_rich_diff #> class       : SpatRaster  #> dimensions  : 5, 5, 4  (nrow, ncol, nlyr) #> resolution  : 72, 36  (x, y) #> extent      : -180, 180, -90, 90  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  #> source(s)   : memory #> names       : mean_diff, sd_diff, min_diff, max_diff  #> min values  :     -2.25,     0.5,       -3,       -1  #> max values  :      2.75,     1.5,        2,        4  #>  algorithm_metrics(r, spat_alg = \"bootspat_naive\", spat_alg_args=list(random=\"site\"), aleats = 4) #> $spp_metrics #>     actual rand_avg   rand_sd rand_min rand_max  sp_reldiff global_reldiff #> sp1      1    10.25 0.9574271        9       11  9.25000000     0.38541667 #> sp2     14    13.75 1.8929694       11       15 -0.01785714    -0.01041667 #> sp3      9     9.75 1.2583057        8       11  0.08333333     0.03125000 #> sp4     12    10.00 2.1602469        7       12 -0.16666667    -0.08333333 #> sp5     12    12.25 2.5000000        9       15  0.02083333     0.01041667 #> sp6     10    12.00 3.4641016        7       15  0.20000000     0.08333333 #> sp7     23    13.00 0.8164966       12       14 -0.43478261    -0.41666667 #>     sp_reldiff_l sp_reldiff_u global_reldiff_l global_reldiff_u #> sp1   8.29257289  10.20742711       0.34552387      0.425309463 #> sp2  -0.15306925   0.11735496      -0.08929039      0.068457060 #> sp3  -0.05647842   0.22314508      -0.02117941      0.083679406 #> sp4  -0.34668724   0.01335391      -0.17334362      0.006676954 #> sp5  -0.18750000   0.22916667      -0.09375000      0.114583333 #> sp6  -0.14641016   0.54641016      -0.06100423      0.227670901 #> sp7  -0.47028246  -0.39928276      -0.45068736     -0.382645976 #>  #> $spat_rich_diff #> class       : SpatRaster  #> dimensions  : 5, 5, 4  (nrow, ncol, nlyr) #> resolution  : 72, 36  (x, y) #> extent      : -180, 180, -90, 90  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  #> source(s)   : memory #> names       : mean_diff, sd_diff, min_diff, max_diff  #> min values  :         0,       0,        0,        0  #> max values  :         0,       0,        0,        0  #>  # algorithm_metrics(r, spat_alg = \"bootspat_naive\", spat_alg_args=list(random=\"both\"))"},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_ff.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatially structured fixed-fixed sample — bootspat_ff","title":"Spatially structured fixed-fixed sample — bootspat_ff","text":"Randomizes raster stack fixed richness species frequency incidence. Randomizations based frequencies (given calculated x) , optionally, probability raster stack. probability raster stack controls probability given species sampled cell raster. Frequency controls number cells sampled species.","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_ff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatially structured fixed-fixed sample — bootspat_ff","text":"","code":"bootspat_ff(   x,   rprob = NULL,   rich = NULL,   fr = NULL,   glob_fr = NULL,   cores = 1,   filename = \"\",   overwrite = FALSE,   ... )"},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_ff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatially structured fixed-fixed sample — bootspat_ff","text":"x SpatRaster. presence-absence SpatRaster. rprob SpatRaster. Stack probability values. Structures spatial pattern randomized species. rich SpatRaster. Richness pattern structuring sample size cell randomization. Calculated provided. fr observed frequency incidence (.e. number occupied pixels) species across study area. glob_fr size (.e. number pixels) study area. cores positive integer. cores > 1, 'parallel' package cluster many cores created used. can also supply cluster object. Ignored functions implemented terra C++ (see fun) filename character. Output filename overwrite logical. TRUE, filename overwritten ... additional parameters terra::app","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_ff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatially structured fixed-fixed sample — bootspat_ff","text":"SpatRaster object","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_ff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spatially structured fixed-fixed sample — bootspat_ff","text":"algorithm based algorithm Connor & Simberloff (1979). takes species time placed Nj (species frequency incidence) randomly chosen sites (cells). original algorithm randomly chooses sequence species fills sites (originally islands) reach observed species richness. However, sites (cells) filled species, species enough available sites placed, sampled frequency smaller observed. Additionally, sites completely filled duplicated species allowed site. solution increase number sites place species. , opted order sequence species largest Nj smallest. Also, probability occupying site given cell expected richness round (.e. species placement), expected richness newly occupied sites reduced. ensures available sites species randomized frequency incidence equals observed frequency incidence (Nj).","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_ff.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spatially structured fixed-fixed sample — bootspat_ff","text":"Connor, E. F., & Simberloff, D. (1979). Assembly Species Communities: Chance Competition? Ecology, 60(6), 1132–1140.","code":""},{"path":[]},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_ff.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spatially structured fixed-fixed sample — bootspat_ff","text":"Neander Marcel Heming","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_ff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatially structured fixed-fixed sample — bootspat_ff","text":"","code":"# load random species distributions library(SESraster) library(terra) r <- load_ext_data() plot(r)   # applying the function rand.str <- bootspat_str(r) plot(rand.str)   # With null probability raster rprobnull <- terra::app(r,                        function(x){                        ifelse(is.na(x), NA, 1)                        }) rand.str2 <- bootspat_str(r, rprob = rprobnull)   library(SESraster) library(terra) # creating random species distributions f <- system.file(\"ex/elev.tif\", package=\"terra\") r <- rast(f) set.seed(510) r10 <- rast(lapply(1:8,                 function(i, r, mn, mx){                   app(r, function(x, t){                     sapply(x, function(x, t){                        x<max(t) & x>min(t)                     }, t=t)                   }, t=sample(seq(mn, mx), 2))                 }, r=r, mn=minmax(r)[1]+10, mx=minmax(r)[2]-10))  names(r10) <- paste(\"sp\", 1:nlyr(r10)) plot(r10)   rprobnull <- terra::app(r10,                        function(x){                        ifelse(is.na(x), NA, 1)                        })  # bootstrapping once randr10 <- bootspat_ff(r10, rprobnull) plot(randr10)  plot(c(sum(r10), sum(randr10)), main=c(\"observed\", \"randomized\"))  plot(sum(r10)-sum(randr10))  cbind(observed=sapply(r10, function(x)freq(x)[2,3]),       randomized=sapply(randr10, function(x)freq(x)[2,3])) #>      observed randomized #> [1,]      767        767 #> [2,]     3443       3443 #> [3,]     1175       1175 #> [4,]      889        889 #> [5,]      908        908 #> [6,]     2160       2160 #> [7,]      548        548 #> [8,]      133        125"},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_naive.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomize a set of rasters according to the observed frequency. — bootspat_naive","title":"Randomize a set of rasters according to the observed frequency. — bootspat_naive","text":"Randomize set rasters according observed frequency using methods: sites (cells), species (layer) (layers cells). randomization assign values cells nodata.","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_naive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomize a set of rasters according to the observed frequency. — bootspat_naive","text":"","code":"bootspat_naive(   x,   random = c(\"site\", \"species\", \"both\"),   filename = \"\",   memory = NULL,   cores = 1,   ... )"},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_naive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomize a set of rasters according to the observed frequency. — bootspat_naive","text":"x SpatRaster. presence-absence SpatRaster. random character. Character indicating type randomization used. available types \"site\", \"specie\" \"\". first method (site) keeps species richness constant within site (cell)pixel randomizing position (presence/absence) species within cell stack. filename character. Output filename memory logical. cores positive integer. cores > 1, 'parallel' package cluster many cores created used. can also supply cluster object. Ignored functions implemented terra C++ (see fun) ... additional arguments passed passed calling function.","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_naive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomize a set of rasters according to the observed frequency. — bootspat_naive","text":"SpatRaster object","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_naive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Randomize a set of rasters according to the observed frequency. — bootspat_naive","text":"first method (site) performed within site (cell) randomizing position (presence/absence) species within cell stack. method keeps species richness constant cell size species distribution might change. second method (species) performed layer (species) stack randomizing position species presences space. method changes species richness cell size species distribution held constant (except randomization performed frequency). third method () combines randomization site species time. method shuffle presences across cells layers, changing site richness species distribution sizes location time.","code":""},{"path":[]},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_naive.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Randomize a set of rasters according to the observed frequency. — bootspat_naive","text":"Neander Marcel Heming Gabriela Alves-Ferreira","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_naive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomize a set of rasters according to the observed frequency. — bootspat_naive","text":"","code":"library(terra) # load random species distributions r <- load_ext_data() plot(r)   # randomize pres/abs data by site rn <- bootspat_naive(r, \"site\") plot(rn)    library(SESraster) library(terra) # creating random species distributions f <- system.file(\"ex/elev.tif\", package=\"terra\") r <- rast(f) set.seed(510) r10 <- rast(lapply(1:18,                 function(i, r, mn, mx){                   app(r, function(x, t){                     sapply(x, function(x, t){                        x<max(t) & x>min(t)                     }, t=t)                   }, t=sample(seq(mn, mx), 2))                 }, r=r, mn=minmax(r)[1]+10, mx=minmax(r)[2]-10))  names(r10) <- paste(\"sp\", 1:nlyr(r10)) plot(r10)   # bootstrapping once randr10 <- bootspat_naive(r10, \"site\") plot(randr10)   plot(c(sum(r10), sum(randr10)), main=c(\"observed\", \"randomized\"))  cbind(observed=sapply(r10, function(x)freq(x)[2,3]),       randomized=sapply(randr10, function(x)freq(x)[2,3])) #>       observed randomized #>  [1,]      767       1813 #>  [2,]     3443       1809 #>  [3,]     1175       1771 #>  [4,]      889       1789 #>  [5,]      908       1814 #>  [6,]     2160       1784 #>  [7,]      548       1789 #>  [8,]      133       1857 #>  [9,]      122       1830 #> [10,]     4174       1780 #> [11,]     2565       1753 #> [12,]     3031       1828 #> [13,]       36       1781 #> [14,]     4387       1816 #> [15,]     3270       1820 #> [16,]     2198       1793 #> [17,]     2427       1815 #> [18,]      235       1826"},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_str.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatially structured sample — bootspat_str","title":"Spatially structured sample — bootspat_str","text":"Randomizes raster stack fixed richness. Randomizations based frequencies (given calculated x) , optionally, probability raster stack. , frequencies probability raster stack, control probability given species sampled cell raster. Frequency controls probability species sampled compared others. Probability raster stack controls probability species sampled given raster cell.","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_str.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatially structured sample — bootspat_str","text":"","code":"bootspat_str(   x,   rprob = NULL,   rich = NULL,   fr_prob = NULL,   cores = 1,   filename = \"\",   memory = NULL,   overwrite = FALSE,   ... )"},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_str.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatially structured sample — bootspat_str","text":"x SpatRaster. presence-absence SpatRaster. rprob SpatRaster. Stack probability values. Structures spatial pattern randomized species. rich SpatRaster. Richness pattern structuring sample size cell randomization. Calculated provided. fr_prob Either frequency pixels probability species observed across whole layer. cores positive integer. cores > 1, 'parallel' package cluster many cores created used. can also supply cluster object. Ignored functions implemented terra C++ (see fun) filename character. Output filename memory logical. Checks enough available RAM memory. Calculated NULL overwrite logical. TRUE, filename overwritten ... additional parameters terra::app","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_str.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatially structured sample — bootspat_str","text":"SpatRaster object","code":""},{"path":[]},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_str.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spatially structured sample — bootspat_str","text":"Neander Marcel Heming","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/bootspat_str.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatially structured sample — bootspat_str","text":"","code":"# load random species distributions library(SESraster) library(terra) r <- load_ext_data() plot(r)   # applying the function rand.str <- bootspat_str(r) plot(rand.str)   # With null probability raster rprobnull <- terra::app(r,                        function(x){                        ifelse(is.na(x), NA, 1)                        }) rand.str2 <- bootspat_str(r, rprob = rprobnull)   library(SESraster) library(terra) # creating random species distributions f <- system.file(\"ex/elev.tif\", package=\"terra\") r <- rast(f) set.seed(510) r10 <- rast(lapply(1:18,                 function(i, r, mn, mx){                   app(r, function(x, t){                     sapply(x, function(x, t){                        x<max(t) & x>min(t)                     }, t=t)                   }, t=sample(seq(mn, mx), 2))                 }, r=r, mn=minmax(r)[1]+10, mx=minmax(r)[2]-10))  names(r10) <- paste(\"sp\", 1:nlyr(r10)) plot(r10)   rprobnull <- terra::app(r10,                        function(x){                        ifelse(is.na(x), NA, 1)                        })  # bootstrapping once randr10 <- bootspat_str(r10, rprobnull) plot(randr10)  plot(c(sum(r10), sum(randr10)), main=c(\"observed\", \"randomized\"))  cbind(observed=sapply(r10, function(x)freq(x)[2,3]),       randomized=sapply(randr10, function(x)freq(x)[2,3])) #>       observed randomized #>  [1,]      767        672 #>  [2,]     3443       3564 #>  [3,]     1175       1071 #>  [4,]      889        787 #>  [5,]      908        816 #>  [6,]     2160       2189 #>  [7,]      548        442 #>  [8,]      133        125 #>  [9,]      122         91 #> [10,]     4174       4231 #> [11,]     2565       2606 #> [12,]     3031       3117 #> [13,]       36         33 #> [14,]     4387       4418 #> [15,]     3270       3394 #> [16,]     2198       2235 #> [17,]     2427       2474 #> [18,]      235        203"},{"path":"https://hemingnm.github.io/SESraster/reference/dot-lyr.sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to resample a vector according to the observed frequency — .lyr.sample","title":"Internal function to resample a vector according to the observed frequency — .lyr.sample","text":"Internal function resample vector according observed frequency","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/dot-lyr.sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to resample a vector according to the observed frequency — .lyr.sample","text":"","code":".lyr.sample(x, fr)"},{"path":"https://hemingnm.github.io/SESraster/reference/dot-lyr.sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to resample a vector according to the observed frequency — .lyr.sample","text":"x numeric. vector containing values resampling. fr data.frame data.frame 3 columns (layer, value, count).","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/dot-lyr.sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to resample a vector according to the observed frequency — .lyr.sample","text":"vector","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/dot-lyr.sample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal function to resample a vector according to the observed frequency — .lyr.sample","text":"Neander Marcel Heming","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/dot-sample.not.NA.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to sample vectors with non-NA values — .sample.not.NA","title":"Internal function to sample vectors with non-NA values — .sample.not.NA","text":"Internal function sample vectors non-NA values","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/dot-sample.not.NA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to sample vectors with non-NA values — .sample.not.NA","text":"","code":".sample.not.NA(x)"},{"path":"https://hemingnm.github.io/SESraster/reference/dot-sample.not.NA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to sample vectors with non-NA values — .sample.not.NA","text":"x numeric. vector containing values resampling.","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/dot-sample.not.NA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to sample vectors with non-NA values — .sample.not.NA","text":"vector","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/dot-sample.not.NA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal function to sample vectors with non-NA values — .sample.not.NA","text":"Neander Marcel Heming","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/dot-str.sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorized structured sample — .str.sample","title":"Vectorized structured sample — .str.sample","text":"Vectorized structured sample","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/dot-str.sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorized structured sample — .str.sample","text":"","code":".str.sample(x, sp, resu, fr_prob)"},{"path":"https://hemingnm.github.io/SESraster/reference/dot-str.sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorized structured sample — .str.sample","text":"x vector containing sample size (.e. richness) first element probabilities remaining sp elements sampled resu vector results, must length sp fr_prob Frequency probability sp element. multiplied probability vector","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/dot-str.sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorized structured sample — .str.sample","text":"vector sampled sp elements","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/dot-str.sample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vectorized structured sample — .str.sample","text":"Neander Marcel Heming","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/fit.memory.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to evaluate if the rasters generated in the function fit on RAM memory — fit.memory","title":"Function to evaluate if the rasters generated in the function fit on RAM memory — fit.memory","text":"Function evaluate rasters generated function fit RAM memory","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/fit.memory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to evaluate if the rasters generated in the function fit on RAM memory — fit.memory","text":"","code":"fit.memory(x, n = 1)"},{"path":"https://hemingnm.github.io/SESraster/reference/fit.memory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to evaluate if the rasters generated in the function fit on RAM memory — fit.memory","text":"x SpatRaster n positive integer. number copies x needed","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/fit.memory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to evaluate if the rasters generated in the function fit on RAM memory — fit.memory","text":"logical","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/fit.memory.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to evaluate if the rasters generated in the function fit on RAM memory — fit.memory","text":"Neander Marcel Heming Gabriela Alves-Ferreira","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/fr2prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust probability of sampling based on frequency of occurrences. — fr2prob","title":"Adjust probability of sampling based on frequency of occurrences. — fr2prob","text":"function used adjust probability species sampled across raster, sampled frequency occurrence species closer observed","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/fr2prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust probability of sampling based on frequency of occurrences. — fr2prob","text":"","code":"fr2prob(x, rprob = NULL)"},{"path":"https://hemingnm.github.io/SESraster/reference/fr2prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust probability of sampling based on frequency of occurrences. — fr2prob","text":"x SpatRaster. presence-absence raster (stack). rprob SpatRaster. raster (stack) probabilities.","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/fr2prob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust probability of sampling based on frequency of occurrences. — fr2prob","text":"numeric vector","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/fr2prob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust probability of sampling based on frequency of occurrences. — fr2prob","text":"","code":"library(SESraster) library(terra) # load random species distributions r <- load_ext_data()  # applying the function fr2prob(r) #>     global1     global2     global3     global4     global5     global6  #>  0.04166623  1.27269835  0.56249121  0.92305917  0.92305917  0.66665556  #>     global7  #> 11.49856268    f <- system.file(\"ex/elev.tif\", package=\"terra\") r <- rast(f) set.seed(510) r10 <- rast(lapply(1:18,                 function(i, r, mn, mx){                   app(r, function(x, t){                     sapply(x, function(x, t){                        x<max(t) & x>min(t)                     }, t=t)                   }, t=sample(seq(mn, mx), 2))                 }, r=r, mn=minmax(r)[1]+10, mx=minmax(r)[2]-10))  names(r10) <- paste(\"sp\", 1:nlyr(r10)) fr2prob(r10) #>      global1      global2      global3      global4      global5      global6  #>  0.199633212  2.952713473  0.342161977  0.238975534  0.245336042  0.881976051  #>      global7      global8      global9     global10     global11     global12  #>  0.134940601  0.029713724  0.027189380  9.594385735  1.254864072  1.920729704  #>     global13     global14     global15     global16     global17     global18  #>  0.007872215 19.757159426  2.442036928  0.911637488  1.112258816  0.053726000  # raw frequencies unlist(terra::global(r10, function(x)sum(x, na.rm=TRUE))) #>  global1  global2  global3  global4  global5  global6  global7  global8  #>      767     3443     1175      889      908     2160      548      133  #>  global9 global10 global11 global12 global13 global14 global15 global16  #>      122     4174     2565     3031       36     4387     3270     2198  #> global17 global18  #>     2427      235"},{"path":"https://hemingnm.github.io/SESraster/reference/load_ext_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load SESraster external datasets — load_ext_data","title":"Load SESraster external datasets — load_ext_data","text":"function loads external datasets available extdata package folder","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/load_ext_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load SESraster external datasets — load_ext_data","text":"","code":"load_ext_data(x = \"spp_sites\")"},{"path":"https://hemingnm.github.io/SESraster/reference/load_ext_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load SESraster external datasets — load_ext_data","text":"x dataset loaded","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/load_ext_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load SESraster external datasets — load_ext_data","text":"SpatRaster object","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/load_ext_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load SESraster external datasets — load_ext_data","text":"available datasets: spp_sites: SpatRaster randomly generated presence-absence data five species.","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/load_ext_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load SESraster external datasets — load_ext_data","text":"","code":"# load random species distributions library(SESraster) library(terra)  r <- load_ext_data()  plot(r)"},{"path":"https://hemingnm.github.io/SESraster/reference/plot_alg_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot performance of randomization algorithms — plot_alg_metrics","title":"Plot performance of randomization algorithms — plot_alg_metrics","text":"Plots objects returned algorithm_metrics","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/plot_alg_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot performance of randomization algorithms — plot_alg_metrics","text":"","code":"plot_alg_metrics(x, what = \"spp\", ...)"},{"path":"https://hemingnm.github.io/SESraster/reference/plot_alg_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot performance of randomization algorithms — plot_alg_metrics","text":"x list. Object returned algorithm_metrics plotted, \"species\" \"site\" metrics? ... Additional parameters passed plot","code":""},{"path":[]},{"path":"https://hemingnm.github.io/SESraster/reference/plot_alg_metrics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot performance of randomization algorithms — plot_alg_metrics","text":"Neander M. Heming","code":""},{"path":"https://hemingnm.github.io/SESraster/reference/plot_alg_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot performance of randomization algorithms — plot_alg_metrics","text":"","code":"library(SESraster) library(terra) r <- load_ext_data() am1 <- algorithm_metrics(r, spat_alg = \"bootspat_naive\", spat_alg_args=list(random=\"species\")) am2 <- algorithm_metrics(r, spat_alg = \"bootspat_naive\", spat_alg_args=list(random=\"site\")) plot_alg_metrics(am1)  plot_alg_metrics(am2)  plot_alg_metrics(am1, \"site\")"},{"path":"https://hemingnm.github.io/SESraster/news/index.html","id":"sesraster-070","dir":"Changelog","previous_headings":"","what":"SESraster 0.7.0","title":"SESraster 0.7.0","text":"bug fix attachMSG added SESraster() handle aleatorizations added algorithm_metrics() compare original randomized rasters added plot_alg_metrics() plot site species difference metrics original randomized rasters changed function name .fit.memory() fit.memory() added argument “n” Added cross links functions added vignette exemplify SESraster() works changed order vignettes","code":""},{"path":"https://hemingnm.github.io/SESraster/news/index.html","id":"sesraster-062","dir":"Changelog","previous_headings":"","what":"SESraster 0.6.2","title":"SESraster 0.6.2","text":"CRAN release: 2023-07-05 fixed error .str.sample() avoid negative probabilities species absent cell (.e. values zero) added bootspat_ff() include Fixed-Fixed algorithm added new vignette added references improved accuracy algorithm description DESCRIPTION, README, vignettes improved accuracy null model descriptions vignettes added link functions documentation","code":""},{"path":"https://hemingnm.github.io/SESraster/news/index.html","id":"sesraster-061","dir":"Changelog","previous_headings":"","what":"SESraster 0.6.1","title":"SESraster 0.6.1","text":"CRAN release: 2023-06-22 Released 2023-06-23 Initial CRAN submission.","code":""}]
